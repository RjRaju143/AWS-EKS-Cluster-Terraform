#### smoke testing ...
# ---
# apiVersion: v1
# kind: Namespace
# metadata:
#   name: 11-example
# ---
# apiVersion: v1
# kind: PersistentVolumeClaim
# metadata:
#   name: myapp
#   namespace: 11-example
# spec:
#   accessModes:
#     - ReadWriteMany
#   storageClassName: efs
#   resources:
#     requests:
#       storage: 5Gi # Don't matter, it's elastic
# ---
# apiVersion: v1
# kind: Pod
# metadata:
#   name: myapp-1
#   namespace: 11-example
# spec:
#   containers:
#     - name: myapp-1
#       image: busybox
#       command: ["/bin/sh"]
#       args:
#         [
#           "-c",
#           "while true; do echo $(date -u) >> /data/out1.txt; sleep 5; done",
#         ]
#       volumeMounts:
#         - name: persistent-storage
#           mountPath: /data
#   volumes:
#     - name: persistent-storage
#       persistentVolumeClaim:
#         claimName: myapp
# ---
# apiVersion: v1
# kind: Pod
# metadata:
#   name: myapp-2
#   namespace: 11-example
# spec:
#   containers:
#     - name: myapp-2
#       image: busybox
#       command: ["/bin/sh"]
#       args:
#         [
#           "-c",
#           "while true; do echo $(date -u) >> /data/out1.txt; sleep 5; done",
#         ]
#       volumeMounts:
#         - name: persistent-storage
#           mountPath: /data
#   volumes:
#     - name: persistent-storage
#       persistentVolumeClaim:
#         claimName: myapp
######################################
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: nginx
#   labels:
#     app: nginx
# spec:
#   replicas: 500
#   selector:
#     matchLabels:
#       app: nginx
#   template:
#     metadata:
#       labels:
#         app: nginx
#     spec:
#       containers:
#         - name: nginx
#           image: nginx
#           imagePullPolicy: Always
#           ports:
#             - containerPort: 80
# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: nginx-service
# spec:
#   selector:
#     app: nginx
#   ports:
#     - protocol: TCP
#       port: 80
#       targetPort: 80
#       # nodePort: 30010
#   # type: ClusterIP
#   # type: NodePort
#   type: LoadBalancer
# ---
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: postgres
#   labels:
#     app: postgres
# spec:
#   replicas: 100
#   selector:
#     matchLabels:
#       app: postgres
#   template:
#     metadata:
#       labels:
#         app: postgres
#     spec:
#       containers:
#         - name: postgres
#           image: postgres:latest # Explicitly set the latest version
#           imagePullPolicy: Always
#           ports:
#             - containerPort: 5432
#           env: # Add environment variables to configure PostgreSQL if needed
#             - name: POSTGRES_USER
#               value: "admin"
#             - name: POSTGRES_PASSWORD
#               value: "password"
#             - name: POSTGRES_DB
#               value: "mydatabase"
# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: postgres-service
# spec:
#   selector:
#     app: postgres
#   ports:
#     - protocol: TCP
#       port: 5432
#       targetPort: 5432
#   type: LoadBalancer
#   # type: ClusterIP
###################################
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
  labels:
    app: nginx
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
        - name: nginx
          image: nginx:latest # Explicitly set the latest version
          imagePullPolicy: Always
          ports:
            - containerPort: 80
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
spec:
  selector:
    app: nginx
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  # type: LoadBalancer
  type: ClusterIP

---
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: prod-cert
spec:
  acme:
    email: your-email@devopsbyexample.com
    server: https://acme-v02.api.letsencrypt.org/directory
    privateKeySecretRef:
      name: letsencrypt-secret
    solvers:
      - http01:
          ingress:
            ingressClassName: external-nginx
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nginx-ingress
  annotations:
    cert-manager.io/cluster-issuer: prod-cert
spec:
  ingressClassName: external-nginx
  tls:
    - hosts:
        - k8s-ingress-external-61c910d500-cdca44da5fa35e7e.elb.ap-south-1.amazonaws.com
      secretName: letsencrypt-secret
  rules:
    - host: k8s-ingress-external-61c910d500-cdca44da5fa35e7e.elb.ap-south-1.amazonaws.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: nginx-service
                port:
                  number: 80
